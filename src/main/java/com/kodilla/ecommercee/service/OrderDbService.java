package com.kodilla.ecommercee.service;

import com.kodilla.ecommercee.domain.*;
import com.kodilla.ecommercee.controller.exception.OrderNotFoundException;
import com.kodilla.ecommercee.controller.exception.UserNotFoundException;
import com.kodilla.ecommercee.controller.exception.CartNotFoundException;
import com.kodilla.ecommercee.repository.CartRepository;
import com.kodilla.ecommercee.repository.OrderRepository;
import com.kodilla.ecommercee.repository.UserRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class OrderDbService {
    private final OrderRepository orderRepository;
    private final CartRepository cartRepository;
    private final UserRepository userRepository;

    public OrderDbService(OrderRepository orderRepository, CartRepository cartRepository, UserRepository userRepository) {
        this.orderRepository = orderRepository;
        this.cartRepository = cartRepository;
        this.userRepository = userRepository;
    }

    public List<OrderDto> getAllOrders() {
        return StreamSupport.stream(orderRepository.findAll().spliterator(), false)
                .map(this::toDto)
                .collect(Collectors.toList());
    }

    public OrderDto getOrderById(Long orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new OrderNotFoundException(orderId));
        return toDto(order);
    }

    public OrderDto createOrder(OrderDto orderDto) throws UserNotFoundException, CartNotFoundException {
        User user = userRepository.findById(orderDto.getUserId())
                .orElseThrow(() -> new UserNotFoundException(orderDto.getUserId()));
        Cart cart = cartRepository.findById(orderDto.getCartId())
                .orElseThrow(() -> new CartNotFoundException(orderDto.getCartId()));

        Order order = new Order(
                null, // ID will be generated by the database
                user,
                orderDto.getTotalAmount(),
                orderDto.getCreationDate(),
                OrderStatus.valueOf(orderDto.getStatus()),
                cart
        );
        Order savedOrder = orderRepository.save(order);
        return toDto(savedOrder);
    }

    public OrderDto updateOrder(Long orderId, OrderDto orderDto) throws UserNotFoundException, CartNotFoundException {
        Order existingOrder = orderRepository.findById(orderId)
                .orElseThrow(() -> new OrderNotFoundException(orderId));

        User user = userRepository.findById(orderDto.getUserId())
                .orElseThrow(() -> new UserNotFoundException(orderDto.getUserId()));
        Cart cart = cartRepository.findById(orderDto.getCartId())
                .orElseThrow(() -> new CartNotFoundException(orderDto.getCartId()));

        Order updatedOrder = new Order(
                existingOrder.getOrderId(),
                user,
                orderDto.getTotalAmount(),
                orderDto.getCreationDate(),
                OrderStatus.valueOf(orderDto.getStatus()),
                cart
        );

        Order savedOrder = orderRepository.save(updatedOrder);
        return toDto(savedOrder);
    }

    public boolean deleteOrder(Long orderId) {
        if (orderRepository.existsById(orderId)) {
            orderRepository.deleteById(orderId);
            return true;
        } else {
            return false;
        }
    }

    private OrderDto toDto(Order order) {
        return new OrderDto(
                order.getOrderId(),
                order.getUser().getUserId(),
                order.getCart().getCartId(),
                order.getStatus().name(),
                order.getCreateDate(),
                order.getTotal()
        );
    }
}
